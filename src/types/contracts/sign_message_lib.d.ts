/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type SignMsg = ContractEventLog<{
  msgHash: string;
  0: string;
}>;

export interface SignMessageLib extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SignMessageLib;
  clone(): SignMessageLib;
  methods: {
    getMessageHash(
      message: string | number[]
    ): NonPayableTransactionObject<string>;

    signMessage(_data: string | number[]): NonPayableTransactionObject<void>;
  };
  events: {
    SignMsg(cb?: Callback<SignMsg>): EventEmitter;
    SignMsg(options?: EventOptions, cb?: Callback<SignMsg>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "SignMsg", cb: Callback<SignMsg>): void;
  once(event: "SignMsg", options: EventOptions, cb: Callback<SignMsg>): void;
}
